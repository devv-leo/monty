How to automated daily contributions to GitHub with GitHub Actions:

Create a folder in your GitHub repository .github/workflow this is where we will create the job for the workflow job.yaml

name: Daily Contributions

on:
  schedule:
    - cron: '0 0 * * 1-5'

jobs:
  make-contribution:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Checkout with full commit history
          fetch-depth: 0
      - name: Make daily contribution
        run: |
          # Replace this command with your own command or script that makes the changes
          echo "Making daily contribution"
          echo "$(date)" >> README.md
      - name: Commit changes
        uses: EndBug/add-and-commit@v7
        with:
          author_name: "GitHub Actions"
          author_email: "actions@github.com"
          message: "Daily contribution"
          # Set the files to commit - replace this with your own file paths
          add: "README.md"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: daily-contribution
          # Set the Git credentials - replace this with your own secrets
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Open pull request
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Daily Contribution"
          commit-message: "Daily contribution"
          branch: daily-contribution
          base: main
          # Set the pull request body - replace this with your own content
          body: "This pull request was created automatically by a GitHub Actions workflow to make a daily contribution."
          # Set the Git credentials - replace this with your own secrets
          token: ${{ secrets.GITHUB_TOKEN }}

The code snippet is written in YAML, which is a human-readable data serialization language. YAML is often used for configuration files, and it is easy to read and write.

The first line of the code snippet is the name of the GitHub Actions workflow. In this case, the workflow is called “Daily Contributions”. The next section defines when the workflow should run. In this case, it is set to run on a schedule using the cron syntax. The cron syntax allows you to set up the workflow to run at specific times of the day or week. I set mine to run Monday — Friday at midnight UTC.

Under the “jobs” section, there is only one job defined, called “make-contribution”. This job is set to run on an Ubuntu machine with the latest version of Ubuntu installed.

The “steps” section contains the tasks that the job will execute. The first step is to check out the code from the GitHub repository using the actions/checkout@v2 action. This action fetches the code from the repository and sets up the environment for the subsequent steps.

The second step is to make a daily contribution. This is where you can add your own command or script to make changes to the code. In this case, the script simply appends the current date to the README.md file.

The third step is to commit the changes to the repository. This step uses the EndBug/add-and-commit@v7 action to commit the changes. The author name and email are set to “GitHub Actions”, and “actions@github.com”, which I set to my GitHub name and email, respectively.

The files to commit are specified using the “add” parameter. In this case, it is set to “README.md”.

The fourth step is to push the changes to the repository using the ad-m/github-push-action@master action. The branch name is set to “daily-contribution”, and the Git credentials are set using the secrets.GITHUB_TOKEN environment variable.

Finally, the fifth step is to open a pull request using the peter-evans/create-pull-request@v3 action. The title and commit message are set to “Daily Contribution”, and the pull request body is set to “This pull request was created automatically by a GitHub Actions workflow to make a daily contribution.” The branch and base parameters are set to “daily - contribution” and “main”, respectively. The Git credentials are again set using the secrets.GITHUB_TOKEN environment variable.

Press enter or click to view image in full size

If you get 403 errors make sure your token has write permission for the contents scope.